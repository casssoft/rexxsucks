testcase = "(+ 1 2)"
testcase2 = "(+ (+ 1 2) (+ 5 6))"
testcase2 = "(+ 1 (+ 5 6))"
currentstring = testcase2
allfunctions.0.0 = "a b"
allfunctions.0.1 = "(+ a b)"
sizeoffunctions = 1
call pinterp 1

say "FINAL:" result
return
getfullstring : procedure expose currentstring
  startindex = arg(1)
  parse firstword
  indentCount = 1
  curindex = startindex + 1
  do forever
    
  verify(newarg, "(", 'M', 1)


pinterp : procedure expose currentstring allfunctions. sizeoffunctions
  startindex = arg(1)
  say "pinterp: startindex: " startindex
  firstsymbol = word(currentstring, startindex)
  parse value firstsymbol with "(" op
  if (op == '') then
    do
      /* or look up in env */
      say "no op, firstsymbol: " firstsymbol
      nextindex = startindex + 1
      say "returning"
      parse value firstsymbol with number ")"
      return number nextindex
    end
  else
    do
      if (op == "+") then
        do
          say "yes plus"
          
          call pinterp startindex + 1
          firstvalue = word(result, 1)
          nextindex = word(result, 2)
          call pinterp nextindex
          secondvalue = word(result, 1)
          nextindex = word(result, 2)
          newvalue = firstvalue + secondvalue
          return newvalue nextindex
        end
      else
        if (op == "func") then
          do
            say "yes function"
            /* parse list of args*/
            /* (func (a b c) */
            firstarg = word(currentstring, startindex + 1)
            parse value firstarg with "(" fargname
            if (fargname == ")") then
              do
                allfunctions.sizeoffunctions.0 = ""
              end
            else
              allfunctions.sizeoffunctions.0 = fargname
              argwordindex = startindex + 2
              do forever
                newarg = word(currentstring, argwordindex)
                isbrace = verify(newarg, ")", 'M', 1)
                if (isbrace <> 0) then
                  do
                    parse value newarg with argname ")"
                    allfunctions.sizeoffunctions.0 = allfunctions.sizeoffunctions.0 argname
                    leave
                  end
                allfunctions.sizeoffunctions.0 = allfunctions.sizeoffunctions.0 newarg
                argwordindex = argwordindex + 1
              end
              




            
    end
      
